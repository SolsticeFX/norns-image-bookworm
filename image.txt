>> put lite onto CM3
sudo ./rpiboot
	ref: https://www.raspberrypi.org/documentation/hardware/computemodule/cm-emmc-flashing.md
dd bs=4M if=2017-09-07-raspbian-stretch-lite.img of=/dev/sda conv=fsync
	ref: https://www.raspberrypi.org/documentation/installation/installing-images/linux.md

>> boot CM3IO
sudo raspi-config
	pw, hostname, disable network at startup, locale, timezone, keyboard, wifi country, ssh
sudo nano /etc/wpa_supplicant/wpa_supplicant.conf
	ref: https://www.raspberrypi.org/documentation/configuration/wireless/wireless-cli.md
network={
	ssid="nnnnnnnn+"
	psk="22222222"
}

sudo apt-get update
sudo apt-get install vim git bc i2c-tools

>> transfer .dts to CM3IO from mac/etc
scp dt-blob.dts pi@norns.local:~/

>> build dts on CM3IO (norns on-button latch)
sudo dtc -I dts -O dtb -o /boot/dt-blob.bin dt-blob.dts
	ref: https://www.raspberrypi.org/documentation/configuration/pin-configuration.md

>> RT linux kernel build on ubuntu
	ref: https://www.raspberrypi.org/documentation/linux/kernel/building.md
	ref: https://autostatic.com/2017/06/27/rpi-3-and-the-real-time-kernel/
	find correct kernel: https://github.com/raspberrypi/linux/commits?author=gregkh	
	patch: https://www.kernel.org/pub/linux/kernel/projects/rt/4.9/

git clone https://github.com/raspberrypi/tools.git
git clone https://github.com/raspberrypi/linux.git -b rpi-4.9.y
cd linux
git checkout 807c5d97f188a5766a931f944e3c4dcc21af4fce
cd ..
wget https://www.kernel.org/pub/linux/kernel/projects/rt/4.9/patch-4.9.47-rt37.patch.xz
wget https://raw.githubusercontent.com/fedberry/kernel/master/usb-dwc_otg-fix-system-lockup-when-interrupts-are-threaded.patch
cd linux
make bcm2709_defconfig
export KERNEL=kernel7
export ARCH=arm
export CROSS_COMPILE=~/work/tools/arm-bcm2708/gcc-linaro-arm-linux-gnueabihf-raspbian-x64/bin/arm-linux-gnueabihf-
export CONCURRENCY_LEVEL=$(nproc)
xzcat ../patch-4.9.47-rt37.patch.xz | patch -p1
patch -i ../usb-dwc_otg-fix-system-lockup-when-interrupts-are-threaded.patch -p1
get monome-snd patches
apply patches
make menuconfig
	Kernel Features - Preemption Model - Fully Preemptible Kernel (RT)
	Device drivers - Power supply class support - BQ27xxx battery driver (+I2C)
	Device Drivers > Sound Card Support > ALSA > ALSA for SoC > Support for monome-snd
make clean
scripts/config --disable DEBUG_INFO
make 
mkdir ../install
make modules_install INSTALL_MOD_PATH=../install/
cp arch/arm/boot/zImage ../install/
cp arch/arm/boot/dts/*.dtb ../install/
mkdir ../install/overlays
cp arch/arm/boot/dts/overlays/*.dtb* ../install/overlays/
cp arch/arm/boot/dts/overlays/README ../install/overlays/
cd ..
tar czvf image.tgz install
scp image.tgz pi@192.168.1.13:~/

>> ON PI
tar xzvf image.tgz
cd install/
sudo cp *.dtb /boot/
sudo cp overlays/*.dtb* /boot/overlays/
sudo cp overlays/README /boot/overlays/
sudo cp zImage /boot/kernel7.img
sudo cp -R lib /
sudo vim /boot/config.txt
	dtparam=i2s=on
	# Enable i2s-mmap functionality FIXME: NOT FOUND
	dtoverlay=i2s-mmap 
	# Enable monome-snd (loads snd_soc_monome)
	dtoverlay=monome
	# Enable gpio-powerdown
	dtoverlay=gpio-poweroff:gpiopin=12,active_low=1
	# Enable battery monitor
	dtoverlay=bq27441
dtc -@ -I dts -O dtb -o bq27441.dtbo bq27441.dts
sudo cp bq24771.dtbo /boot/overlays 
sudo reboot now


>> on norns (jack)
sudo apt-get install --no-install-recommends jackd2
vim ~/.jackdrc
	/usr/bin/jackd -P75 -dalsa -dhw:0 -p256 -n3 -s -S -r48000
jackd needs to be started with `JACK_NO_AUDIO_RESERVATION=1` env variable, so don't forget to set this as well.

>> (supercollider)
sudo apt-get install libsamplerate0-dev libjack-jackd2-dev libsndfile1-dev libasound2-dev libavahi-client-dev libicu-dev libreadline-dev libfftw3-dev libxt-dev libudev-dev libcwiid-dev cmake git
	ref: http://supercollider.github.io/development/building-raspberrypi
git clone --recursive git://github.com/supercollider/supercollider
cd supercollider
git checkout 3.9
git submodule init && git submodule update
vim lang/LangSource/SC_TerminalClient.cpp
	//mTimer.cancel();
 	if (error==boost::system::errc::success) {mTimer.cancel();} else {return;}
mkdir build && cd build
cmake -L -DCMAKE_BUILD_TYPE="Release" -DBUILD_TESTING=OFF -DSUPERNOVA=OFF -DNATIVE=ON -DSC_WII=ON -DSC_IDE=OFF -DSC_QT=OFF -DSC_ED=OFF -DSC_EL=OFF -DSC_VIM=ON ..
make -j 4
sudo make install
sudo ldconfig
sudo mv /usr/local/share/SuperCollider/SCClassLibrary/Common/GUI /usr/local/share/SuperCollider/SCClassLibrary/scide_scqt/GUI
sudo mv /usr/local/share/SuperCollider/SCClassLibrary/JITLib/GUI /usr/local/share/SuperCollider/SCClassLibrary/scide_scqt/JITLibGUI

>> libmonome
sudo apt-get install cmake libevdev-dev liblo-dev libncurses-dev libncursesw5-dev libreadline-dev libudev-dev 
git clone https://github.com/monome/libmonome
./waf configure
./waf
sudo ./waf install

>> nanomsg
git clone https://github.com/nanomsg/nanomsg.git
./configure
make
sudo make install
sudo ldconfig

>> norns
git clone https://github.com/tehn/norns.git
cd norns
git submodule init && git submodule update
make
cd crone
./install.sh



>> fbtft, on ubuntu
cd linux/drivers/video
git clone https://github.com/notro/fbtft
cd fbtft
wget https://raw.githubusercontent.com/alidaf/raspberryPi/master/displayPi/ssd1322-spi/fbtft/fb_ssd1322.c
vim Kconfig
	config FB_TFT_SSD1322
  tristate "FB driver for the SSD1322 OLED Controller"
  depends on FB_TFT
  help
     Framebuffer support for SSD1322
vim Makefile
	obj-$(CONFIG_FB_TFT_SSD1322) += fb_ssd1322.o
cd ..
vim Kconfig
	source "drivers/video/fbtft/Kconfig"
vim Makefile
	obj-y += fbtft/

export KERNEL=kernel7
export ARCH=arm
export CROSS_COMPILE=~/work/tools/arm-bcm2708/gcc-linaro-arm-linux-gnueabihf-raspbian-x64/bin/arm-linux-gnueabihf-
export CONCURRENCY_LEVEL=$(nproc) 
make menuconfig
	Device Drivers --->
  	Graphics support --->
	Frame buffer Devices --->
	Support for small TFT LCD display modules --->

install overlay for ssd1322
add to config.txt
	dtoverlay=ssd1322-spi



move startup scripts to /home/pi/

add to crontab
    @reboot /home/pi/init-norns.sh
    @reboot /home/pi/start-crone.sh

add to /home/pi/.profile
    ~/start-matron.sh

raspi-config
    autologin console no password
    (for .profile execution)


>> wifi hotspot setup
(reference https://frillip.com/using-your-raspberry-pi-3-as-a-wifi-access-point-with-hostapd/)

sudo apt-get install dnsmasq
sudo apt-get install hostapd

sudo cp config/dnsmasq.conf /etc/dnsmasq.conf
sudo cp config/hostapd /etc/default/hostapd
sudo cp config/hostapd.conf /etc/hostapd/hostapd.conf
sudo cp config/dhcpcd.conf /etc/dhcpcd.conf
sudo cp config/interfaces /etc/network/interfaces
systemctl disable dhcpcd.service
systemctl disable hostapd.service
systemctl disable dnsmasq.service

then reboot...

>> bootsplash, start norns on boot, networking after
sudo cp config/cairotest.service /etc/systemd/system/cairotest.service
sudo systemctl enable cairotest
cp norns-image/scripts/init-norns.sh /home/pi/init-norns.sh
sudo rm /etc/init.d/init-norns.sh
(then ensure /home/pi/init-norns.sh is called from /etc/rc.local)
(also ensure /boot/config.txt contains dtoverlay=ssd1322-spi)
